@startuml
skinparam style strictuml
skinparam packageStyle rectangle

package View {
  class Main {
  -root:BorderPane
  -userController:GenericController<User>
  -taskController:GenericController<Task>
  -timeLineSettingsController:GenericController<TimeLineSettings>
  -helperfunctions:Helperfunctions
  -isAdminLoggedIn:Boolean = false
    +start():void
    - showUserSettings():void
    - setupHeader():void
    - showTimeLineMenu():void
    - showAdminMenu():void
    - isAdminAuthSuccessful():Boolean
  }

  class Header{
    -taskController:GenericController<Task>
    -onZeitachseClicked:(List<Task)
    -onAdminClicked:()
    +init():void
    -showAboutDialog():void
  }

    class AuthSettings {
      - userController:GenericController<User>
      - helperfunctions:Helperfunctions
      - onSettingsSaved()
      + createView(): VBox
      - createNewAdminView():VBox
      - createAdminPasswordUpdateView(adminName:String):VBox
      - createNewAdmin():void
      - updateAdminPassword():void
      - isValidEmail():Boolean
    }

    Main --> AuthSettings
    Main --> Header


package "timeline"{
class TimeLineManager {
    -taskController:GenericController<Task>
    -userController:GenericController<User>
    -settingsFile:File
    + createFullScreenView():AnchorPane
    + createView():VBox
    - loadTimeLineSettings():Pair<Int, List<Int>
  }

  class TimeLine{
      -user:User
      -taskController:GenericController<Task>
      -timelineContent:Pane
      -scrollPane:ScrollPane
      -nowPointer:Polygon
      -windowStart:LocalDateTime
      -windowEnd:LocalDateTime
      + createView(tasks:List<Task>): Pane
      - initAutoScrollToCurrentTime(): void
      - drawTimeMarkers():void
      - drawTasks(tasks:List<Task>):void
      - createTriStateCheckbox():Label
      - saveTaskStatus():void
      - getNextStatus():Int
      - getStatusStyle():String
      - getStatusText():String
      - initTimeUpdater():void
      - createUserHeader(user:User):Hbox
  }

  class Header{
    -dayView:ImageView
    -periodImageView:ImageView
    -monthImageView:ImageView
    - getDayImagePath():String
    - getPeriodImagePath():String
    - getMonthImagePath():String
  }

  TimeLineManager --> Header
  TimeLineManager --> TimeLine
}

  package "admin" {

    class AdminMenu {
      -taskController:GenericController<Task>
      -userController:GenericController<User>
      -timeLineSettingsController:GenericController<TimeLineSettings>
      -helperfunctions:Helperfunctions
      -content:StackPane
      + createView(): VBox
      - createAdminSettingsHeader(): HBox
      - refreshView(): void
    }

    Main --> TimeLineManager
    Main --> AdminMenu


   class TaskManagerMenu {
    -taskController:GenericController<Task>
    -userController:GenericController<User>
    - taskTreeView:TreeView
         - userDropdown:Combobox
         - taskEditorContainer:VBox
         -users:List<Users>
         -tasks:List<Tasks>
         + createView(): VBox
         - createHeader():HBox
         -updateTaskEditor()
         -updateTaskTree()
         -selectAdmin()
   }

    class TaskEditor {
      - taskController:GenericController<Task>
      - task:Task
      - user:User
      - onTaskChanged()
      - selectedFile:File
      -helperfunctions:Helperfunctions
      + createView(): VBox
      - createSVGIconButton():Button
      -saveTask()
      -deleteTask()
      -createDropdownButton()

    }


    class AdminSettingsMenu {
      - userController:GenericController<User>
      - timeLineSettingsController:GenericController<TimeLineSettings>
      - helperfunctions:Helperfunctions
      - onSettingsSaved()
      - users:List<User>
      + createView(): VBox
      -createUserListView():VBox
      -showUserAddModal()
    }

    class TimelineSettings {
          -userController:GenericController<User>
          -timeLineSettingsController:GenericController<TimeLineSettings>
          -helperfunctions:Helperfunctions
          -timelineCountDropdown:Combobox
          -userDropdowns:List<String>
          -users:List<Users>
          + createView(): VBox
          - loadSettings()
          - saveSettings()
    }


    AdminSettingsMenu --> TimelineSettings
    TaskManagerMenu --> TaskEditor

  }

  AdminMenu --> admin.AdminSettingsMenu
  AdminMenu --> admin.TaskManagerMenu
}

package Controller {
  class GenericController<T> {
   + create(newData:T,routePath:String)
   + read(entityId:Int,userId:Int,newData:T,routePath:String)
   + update(entityId:Int,updatedData:T,routePath:String)
   + delete(entityId:Int,routePath:String)
  }

  Main --> GenericController

}

package Storage {
  interface StorageInterface<T> {
       + checkIfFilePathExists():void
       + create(newData:T,routePath:String)
       + read(entityId:Int,userId:Int,newData:T,routePath:String)
       + update(entityId:Int,updatedData:T,routePath:String)
       + delete(entityId:Int,routePath:String)
       + loadEntities(): List<T>
       + saveEntities(entities:List<T>): void
     }

     class TaskStorage {
     -filePath:String
     -file:File
       + checkIfFilePathExists():void
       + create(newData:Task,routePath:String)
       + read(entityId:Int,userId:Int,newData:Task,routePath:String)
       + update(entityId:Int,updatedData:Task,routePath:String)
       + delete(entityId:Int,routePath:String)
       + loadEntities(): List<Task>
       + saveEntities(entities:List<Task>): void
       - serializeTask(Task):String
       - parseTask(String):Task
       - escapeField()
       - unescapeField()
     }

     class UserStorage {
     -filePath:String
     -file:File

       + checkIfFilePathExists():void
       + initializeCurrentId():void
       + create(newData:User,routePath:String)
       + read(entityId:Int,userId:Int,newData:User,routePath:String)
       + update(entityId:Int,updatedData:User,routePath:String)
       + delete(entityId:Int,routePath:String)
       + loadEntities(): List<User>
       + saveEntities(entities:List<User>): void
       - serializeUser()
       -parseUser():User
       - isAdminExists():Boolean
       - getAdmin():User
       - hashPassword():String

     }

     class TimeLineSettingsStorage {
     -filePath:String
     -file:File
          + checkIfFilePathExists():void
             + create(newData:TimeLineSettings,routePath:String)
             + read(entityId:Int,userId:Int,newData:TimeLineSettings,routePath:String)
             + update(entityId:Int,updatedData:TimeLineSettings,routePath:String)
             + delete(entityId:Int,routePath:String)
             + loadEntities(): List<TimeLineSettings>
             + saveEntities(entities:List<TimeLineSettings>): void
     }

     GenericController --> StorageInterface
     StorageInterface <|.. TaskStorage
     StorageInterface <|.. UserStorage
     StorageInterface <|.. TimeLineSettingsStorage

}

package Model {
  class Task {
     id: Int
     userId: Int
     title: String
     priority: String
     updatedAt: LocalDateTime
     startTime: LocalDateTime
     endTime: LocalDateTime
     deadLine?:LocalDateTime
     status:String,
     imageBase64:String
  }

  class User {
     id: Int
     name: String
     email: String
     password?: String
     role: String
     profileImage:String
    + generateId()
  }

  class TimeLineSettings{
     timeLineCount:Int
     userId:Int
  }

}
}
@enduml