@startuml
skinparam style strictuml
skinparam packageStyle rectangle

package "Presentation Layer (View)" {
  interface MainMen端 {
    + showUserSettings()
    + setupHeader()
    + showTimeLineMenu()
    + showAdminMenu()
    + authenticateAdmin():bool
    + showAlert()
  }

  class TimeLineManager {
    + createView()
    + loadTimeLineSettings():Pair<Int, List<Int>
  }

  class TimeLine{
      + createView(): Pane
      + initAutoScrollToCurrentTime(): void
      + drawTimeMarkers()
      + drawTasks(List)
      + initTimeUpdater()
  }

  class TimeLineHeader{
    + init()
    + startClock()
  }

  TimeLineManager <|--TimeLineHeader
  TimeLineManager <|--TimeLine

  class AdminMenu {
    + createView(): VBox
    - createAdminSettingsHeader(): HBox
    - refreshView(): void
  }

  MainMen端 <|-- TimeLineManager
  MainMen端 <|-- AdminMenu

  package "AdminSettings" {
    class TaskManager {
      + createView(): VBox
      + addTask()
    }   
    class TimelineSettings {
      + createView(): VBox
      + loadTimeLineSettings()
      + saveTimeLineSettings()
      + showAlert()
    }

    class UserManager {
      + createView(): VBox
      + showUserUpdateDialog()
      + showUserAddModal()

    }

    class AdminAuthSettings {
      + createView(): VBox
      + updatePassword()
      + showalert()
    }
  }

  AdminMenu --> AdminSettings.TaskManager
  AdminMenu --> AdminSettings.AdminAuthSettings
  AdminMenu --> AdminSettings.UserManager
  AdminMenu --> AdminSettings.TimelineSettings
}

package "ServiceLayer" {
  interface CrudService<T> {
    + findAll(): List<T>
    + findById(Int): T
    + save(T): void
    + delete(Int): void
  }

  class TaskService {
    + findAll(): List<Task>
    + findById(Int): Task
    + findByUserId(Int): void
    + save(Task): void
    + encodeImageToBase64(Int): void
    + delete(Int): void
  }

  class UserService {
    + findAll(): List<User>
    + findById(Int): User
    + save(User): void
    + delete(Int): void
    + isAdminExists():bool
    + getAdmin():User
    + hashPassword(String):String
    + updateAdminPasswort():void
    + validateUser(Username,Passwort):void
  }

  CrudService <|.. TaskService
  CrudService <|.. UserService


  MainMen端 --> CrudService

  CrudService --> Controller.StorageInterface

}

package Controller {
  interface StorageInterface<T> {
       + checkIfFilePathExists():void
       + loadEntities(): List<T>
       + saveEntities(List<T>): void
       + addEntity(T): void
       + updateEntity(Int, T): Boolean
       + deleteEntityById(Int): Boolean
     }

     class TaskStorage {
       + checkIfFilePathExists():void
       + loadEntities(): List<Task>
       + saveEntities(List<Task>): void
       + addEntity(Task): void
       + updateEntity(Int, Task): Boolean
       + deleteEntityById(Int): Boolean
       + serializeTask(Task):String
       + parseTask(String):Task
     }

     class UserStorage {
       + checkIfFilePathExists():void
       + initializeCurrentId():void
       + loadEntities(): List<User>
       + saveEntities(List<User>): void
       + addEntity(User): void
       + updateEntity(Int, User): Boolean
       + deleteEntityById(Int): Boolean
     }

     StorageInterface <|.. TaskStorage
     StorageInterface <|.. UserStorage

}

package "Model Layer" {
  class Task {
    + id: Int
    + title: String
    + startTime: LocalDateTime
    + endTime: LocalDateTime
  }

  class User {
    + id: Int
    + name: String
    + role: String
  }
}

package "Utilities" {
  class ErrorManager {
    + logError(String, Exception): void
    + alertUser(String, String): void
  }

  ErrorManager ..> Controller.StorageInterface
}
@enduml